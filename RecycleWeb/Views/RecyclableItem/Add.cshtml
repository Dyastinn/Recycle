@model RecycleWeb.RecyclableItem

@{
    ViewBag.Title = "Add";
}

<h2>Add</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <!-- Use container-fluid for full-width layout -->
        <div class="card shadow border-primary mt-4">
            <div class="card-body p-4">
                <h4 class="text-center">Add Recyclable Item</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group row">
                    @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control shadow" } })
                        @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control shadow" } })
                        @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.RecyclableTypeId, "Recyclable Type", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.RecyclableTypeId, ViewBag.TypesList as SelectList, "Select Type", htmlAttributes: new { @class = "form-control shadow", id = "recyclableTypeDropdown" })
                        @Html.ValidationMessageFor(model => model.RecyclableTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control shadow", id = "weight" } })
                        @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                    </div>
                </div>

                <input type="hidden" id="rate" value="@ViewBag.ratetype" />

                <div class="form-group row">
                    @Html.LabelFor(model => model.ComputedRate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ComputedRate, new { disabled = true, @readonly = "readonly", htmlAttributes = new { @class = "form-control shadow", id = "computedRate" } })
                        @Html.ValidationMessageFor(model => model.ComputedRate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <br />
                    <div class="col-md-offset-2 col-3">
                        <input type="submit" value="Create" class="btn btn-primary form-control border" />
                    </div>
                    <br />
                    <div class="col-md-offset-2 col-3">
                        <input type="reset" value="Reset" class="btn btn-primary form-control border" />
                    </div>
                    <br />
                    <div class="col-md-offset-2 col-3">
                        @Html.ActionLink("Back to List", "List", null, new { @class = "btn btn-secondary form-control border" })
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            function updateSelectedValue() {
                var selectedValue = $('#recyclableTypeDropdown').val();
                console.log("Selected value: " + selectedValue);

                parseFloat($('#rate').val(selectedValue));
            }

            updateSelectedValue();

            $('#recyclableTypeDropdown').change(function () {
                updateSelectedValue();
            });

            $('#computedRate').prop('readonly', true);
            $('#rate, #weight').on('input', function () {
                var rate = parseFloat($('#rate').val()) || 0;
                var weight = parseFloat($('#weight').val()) || 0;
                var computedRate = rate * weight;

                $('#computedRate').val(computedRate.toFixed(2));
            });
        });
    </script>
}
